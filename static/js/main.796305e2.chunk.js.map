{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ImageComp","src","index","style","margin","display","alt","GeneratePdfThumbnailsView","useState","thumbnails","setThumbnails","useEffect","a","generatePdfThumbnails","thumbnailsResult","console","error","generateThumbnails","target","rel","href","map","thumbnail","page","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"0NAIMA,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,MAAR,OAAqB,sBAAKC,MAAO,CAAEC,OAAQ,OAAQC,QAAS,gBAAvC,UACrC,qBAAKJ,IAAKA,EAAKK,IAAKJ,IACpB,6CAAgBA,SA8BHK,EA3BmB,WAAQ,IAAD,EACHC,mBAAS,MADN,mBAChCC,EADgC,KACpBC,EADoB,KAgBvC,OAbAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,+EAGmCC,IAAsB,cAAe,KAHxE,OAGUC,EAHV,OAIIJ,EAAcI,GAJlB,gDAMIC,QAAQC,MAAR,MANJ,0DADc,uBAAC,WAAD,wBAUdC,KACC,IAGD,oCACE,mBAAGC,OAAO,SAASC,IAAI,aAAaC,KAAK,qDAAzC,sCACA,8EAEIX,GAAcA,EAAWY,KAAI,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,KAAd,OAAyB,cAAC,EAAD,CAAsBtB,IAAKqB,EAAWpB,MAAOqB,GAA7BA,UClBjEC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAD,MAEFC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.796305e2.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport generatePdfThumbnails from 'pdf-thumbnails-generator';\n\nconst ImageComp = ({ src, index }) => (<div style={{ margin: '1rem', display: 'inline-block' }}>\n  <img src={src} alt={index} />\n  <p>Page Index: {index}</p>\n</div>);\n\nconst GeneratePdfThumbnailsView = () =>  {\n  const [thumbnails, setThumbnails] = useState(null);\n\n  useEffect(() => {\n    async function generateThumbnails() {\n      try {\n        \n        const thumbnailsResult = await generatePdfThumbnails('/sample.pdf', 150);\n        setThumbnails(thumbnailsResult);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    generateThumbnails();\n  }, []);\n\n  return (\n    <section>\n      <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/lexnim/pdf-thumbnails-generator\">pdf-thumbnails-generator</a>\n      <p>Library to generate thumbnails from given pdf</p>\n        {\n          thumbnails && thumbnails.map(({ thumbnail, page }) => <ImageComp key={page} src={thumbnail} index={page} />)\n        }\n    </section>\n  );\n};\n\nexport default GeneratePdfThumbnailsView;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}